---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-nginx-template
  labels:
    app: vault
data:
  nginx.conf.tmpl: |
    worker_processes     4;
    worker_rlimit_nofile 65535;
    pid /tmp/nginx.pid;

    events {
        multi_accept       on;
        worker_connections 65535;
    }

    http {
        charset                utf-8;
        sendfile               on;
        tcp_nopush             on;
        tcp_nodelay            on;
        server_tokens          off;
        log_not_found          off;
        types_hash_max_size    2048;
        types_hash_bucket_size 64;
        client_max_body_size   16M;

        # Logging
        access_log             /var/log/nginx/access.log;
        error_log              /var/log/nginx/error.log warn;

        server {
            listen 8080;
            client_body_temp_path /tmp/client_temp;
            proxy_temp_path /tmp/proxy_temp;
            fastcgi_temp_path /tmp/fastcgi_temp;
            uwsgi_temp_path /tmp/uwsgi_temp;
            scgi_temp_path /tmp/scgi_temp;

            location / {
              {{ with secret "secrets/k11s/demo/app/nginx" }}
              return 200 '{{ .Data.data.responseText }}';
              add_header Content-Type text/plain always;
              {{ end }}
            }
            }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-agent-configs
  labels:
    app: vault
data:
  vault-agent-init.hcl: |
    pid_file = "/tmp/.pidfile"

    auto_auth {
      mount_path = "auth/approle"
      method "approle" {
        config = {
          role_id_file_path = "/etc/vault/config/app-role-id"
        }
      }
    }
    template {
                source      = "/etc/vault/config/template/nginx/nginx.conf.tmpl"
                destination = "/etc/vault/config/render/nginx/nginx.conf"
    }

    vault {
      address = "http://vault-nodeport:8200"
    }
    exit_after_auth = true
  vault-agent-reload.hcl: |
    pid_file = "/tmp/.pidfile"

    auto_auth {
      mount_path = "auth/approle"
      method "approle" {
        config = {
          role_id_file_path = "/etc/vault/config/app-role-id"
        }
      }
    }

    template {
          source      = "/etc/vault/config/template/nginx/nginx.conf.tmpl"
          destination = "/etc/vault/config/render/nginx/nginx.conf"
          command = "ps ax | grep 'nginx: maste[r]' | awk '{print $1}' | xargs kill -s HUP"
    }
    template_config {
          static_secret_render_interval = "1m"
    }

    vault {
      address = "http://vault-nodeport:8200"
    }

  app-role-id: |
    c823e94e-1cc0-ec8b-13c4-61e231b9ba1e
---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-autoreload
  labels:
    role: nginx-reload-test
    app: vault
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      role: nginx-reload-test
  template:
    metadata:
      labels:
        role: nginx-reload-test
    spec:
      shareProcessNamespace: true
      initContainers:
        - name: init-nginx-config
          image: vault:1.9.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10001
            runAsNonRoot: true
            capabilities:
              add:
                - IPC_LOCK
          args:
            - "agent"
            - "-config=/etc/vault/config/vault-agent-init.hcl"
          env:
            - name: SKIP_SETCAP
              value: 'true'
          volumeMounts:
            - mountPath: /etc/vault/config
              name: vault-agent-config
            - mountPath: /etc/vault/config/template/nginx
              name: vault-nginx-template
            - mountPath: /etc/vault/config/render/nginx
              name: nginx-rendered-conf
      containers:
        - name: nginx
          image: nginx:1.21.4-alpine
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /etc/nginx/
              name: nginx-rendered-conf
              readOnly: true
          resources:
            requests:
              cpu: "0.2"
              memory: "200Mi"
            limits:
              cpu: "0.5"
              memory: "500Mi"
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          securityContext:
            runAsUser: 10001
            runAsNonRoot: true
        - name: vault-agent-rerender
          image: vault:1.9.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10001
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - IPC_LOCK
                - SYS_PTRACE
          args:
            - "agent"
            - "-config=/etc/vault/config/vault-agent-reload.hcl"
          env:
            - name: SKIP_SETCAP
              value: 'true'
          volumeMounts:
            - mountPath: /etc/vault/config
              name: vault-agent-config
            - mountPath: /etc/vault/config/template/nginx
              name: vault-nginx-template
            - mountPath: /etc/vault/config/render/nginx
              name: nginx-rendered-conf
      volumes:
        - name: vault-nginx-template
          configMap:
            name: vault-nginx-template
        - name: vault-agent-config
          configMap:
            name: vault-agent-configs
        - name: nginx-rendered-conf
          emptyDir:
            medium: Memory
---
# NodePort: Exposes the Service on each Node's IP at a static port.
apiVersion: v1
kind: Service
metadata:
  name: nginx-auto-svc
  labels:
    app: vault
spec:
  type: NodePort
  selector:
    role: nginx-reload-test
  ports:
    - name: nginx-auto-svc
      protocol: TCP
      nodePort: 32000 # Port to apply from outside (to see ips - 'kubectl get nodes -o wide').
      port: 8080 # Port to apply from inside (to see ips - 'kubectl get svc').
      targetPort: http # Port to map acces to (to see ips - 'kubectl get pods -o wide')
